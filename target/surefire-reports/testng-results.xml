<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="41" passed="40">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="202" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="202" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
      <class name="com.ip.qa.StreamDemo2Test">
        <test-method status="PASS" signature="testWithEmptyArray()[pri:0, instance:com.ip.qa.StreamDemo2Test@7a79be86]" name="testWithEmptyArray" duration-ms="3" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithEmptyArray -->
        <test-method status="PASS" signature="testWithNonMultiple()[pri:0, instance:com.ip.qa.StreamDemo2Test@7a79be86]" name="testWithNonMultiple" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithNonMultiple -->
        <test-method status="PASS" signature="testWithMultiple()[pri:0, instance:com.ip.qa.StreamDemo2Test@7a79be86]" name="testWithMultiple" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithMultiple -->
      </class> <!-- com.ip.qa.StreamDemo2Test -->
      <class name="com.ip.qa.StreamDemo1Test">
        <test-method status="PASS" signature="checkWithEmptyArray()[pri:0, instance:com.ip.qa.StreamDemo1Test@6e8dacdf]" name="checkWithEmptyArray" duration-ms="5" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkWithEmptyArray -->
        <test-method status="PASS" signature="checkingWithLessthanGivenCondition()[pri:0, instance:com.ip.qa.StreamDemo1Test@6e8dacdf]" name="checkingWithLessthanGivenCondition" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingWithLessthanGivenCondition -->
        <test-method status="PASS" signature="checkingWithGreaterThanGivenCondition()[pri:0, instance:com.ip.qa.StreamDemo1Test@6e8dacdf]" name="checkingWithGreaterThanGivenCondition" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingWithGreaterThanGivenCondition -->
        <test-method status="PASS" signature="checkingWithNegitiveAndPositiveNumbers()[pri:0, instance:com.ip.qa.StreamDemo1Test@6e8dacdf]" name="checkingWithNegitiveAndPositiveNumbers" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingWithNegitiveAndPositiveNumbers -->
        <test-method status="PASS" signature="checkingWithNegitiveNumbers()[pri:0, instance:com.ip.qa.StreamDemo1Test@6e8dacdf]" name="checkingWithNegitiveNumbers" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkingWithNegitiveNumbers -->
      </class> <!-- com.ip.qa.StreamDemo1Test -->
      <class name="com.ip.qa.ComparatorTest">
        <test-method status="PASS" signature="testWithAllNegitiveNumbers()[pri:0, instance:com.ip.qa.ComparatorTest@1e643faf]" name="testWithAllNegitiveNumbers" duration-ms="4" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithAllNegitiveNumbers -->
        <test-method status="PASS" signature="testWithPosiAndNegitive()[pri:0, instance:com.ip.qa.ComparatorTest@1e643faf]" name="testWithPosiAndNegitive" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithPosiAndNegitive -->
        <test-method status="PASS" signature="testWithAllPositiveNumbers()[pri:0, instance:com.ip.qa.ComparatorTest@1e643faf]" name="testWithAllPositiveNumbers" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithAllPositiveNumbers -->
        <test-method status="PASS" signature="testWithZeroNegitiveNumbers()[pri:0, instance:com.ip.qa.ComparatorTest@1e643faf]" name="testWithZeroNegitiveNumbers" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithZeroNegitiveNumbers -->
      </class> <!-- com.ip.qa.ComparatorTest -->
      <class name="com.ip.qa.BOperatorTest">
        <test-method status="PASS" signature="testOneNegNum()[pri:0, instance:com.ip.qa.BOperatorTest@6a5fc7f7]" name="testOneNegNum" duration-ms="61" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNegNum -->
        <test-method status="PASS" signature="testTwoNegNum()[pri:0, instance:com.ip.qa.BOperatorTest@6a5fc7f7]" name="testTwoNegNum" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoNegNum -->
        <test-method status="PASS" signature="testTwoNum()[pri:0, instance:com.ip.qa.BOperatorTest@6a5fc7f7]" name="testTwoNum" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoNum -->
        <test-method status="PASS" signature="testWithLargeNumbers()[pri:0, instance:com.ip.qa.BOperatorTest@6a5fc7f7]" name="testWithLargeNumbers" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithLargeNumbers -->
        <test-method status="PASS" signature="testWithZero()[pri:0, instance:com.ip.qa.BOperatorTest@6a5fc7f7]" name="testWithZero" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithZero -->
      </class> <!-- com.ip.qa.BOperatorTest -->
      <class name="com.ip.qa.PredicateDemoTest">
        <test-method status="PASS" signature="checkWithEmptyString()[pri:0, instance:com.ip.qa.PredicateDemoTest@5594a1b5]" name="checkWithEmptyString" duration-ms="4" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkWithEmptyString -->
        <test-method status="PASS" signature="testWithLargeString()[pri:0, instance:com.ip.qa.PredicateDemoTest@5594a1b5]" name="testWithLargeString" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithLargeString -->
        <test-method status="PASS" signature="testWithNumbers()[pri:0, instance:com.ip.qa.PredicateDemoTest@5594a1b5]" name="testWithNumbers" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithNumbers -->
        <test-method status="PASS" signature="testWithString()[pri:0, instance:com.ip.qa.PredicateDemoTest@5594a1b5]" name="testWithString" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithString -->
      </class> <!-- com.ip.qa.PredicateDemoTest -->
      <class name="com.ip.qa.LowerCaseTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.ip.qa.LowerCaseTest@3ac3fd8b]" name="setUp" is-config="true" duration-ms="19" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.ip.qa.PredicateDemoTest@5594a1b5]" name="setUp" is-config="true" duration-ms="2" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testWithLowerCase()[pri:0, instance:com.ip.qa.LowerCaseTest@3ac3fd8b]" name="testWithLowerCase" duration-ms="2" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithLowerCase -->
        <test-method status="PASS" signature="testWithMultipleWords()[pri:0, instance:com.ip.qa.LowerCaseTest@3ac3fd8b]" name="testWithMultipleWords" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithMultipleWords -->
        <test-method status="PASS" signature="testWithLowerUpperords()[pri:0, instance:com.ip.qa.LowerCaseTest@3ac3fd8b]" name="testWithLowerUpperords" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithLowerUpperords -->
        <test-method status="PASS" signature="testWithNumbers()[pri:0, instance:com.ip.qa.LowerCaseTest@3ac3fd8b]" name="testWithNumbers" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithNumbers -->
        <test-method status="PASS" signature="testWithnumbersWords()[pri:0, instance:com.ip.qa.LowerCaseTest@3ac3fd8b]" name="testWithnumbersWords" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithnumbersWords -->
      </class> <!-- com.ip.qa.LowerCaseTest -->
      <class name="com.ip.qa.Comparator2Test">
        <test-method status="PASS" signature="testWithAllNegitiveNumbers()[pri:0, instance:com.ip.qa.Comparator2Test@3b6eb2ec]" name="testWithAllNegitiveNumbers" duration-ms="10" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithAllNegitiveNumbers -->
        <test-method status="PASS" signature="testWithAllPositiveNumbers()[pri:0, instance:com.ip.qa.Comparator2Test@3b6eb2ec]" name="testWithAllPositiveNumbers" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithAllPositiveNumbers -->
        <test-method status="PASS" signature="testWithPositiveAndNegitiveNumber()[pri:0, instance:com.ip.qa.Comparator2Test@3b6eb2ec]" name="testWithPositiveAndNegitiveNumber" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithPositiveAndNegitiveNumber -->
        <test-method status="PASS" signature="testWithZeroPositiveAndNegitive()[pri:0, instance:com.ip.qa.Comparator2Test@3b6eb2ec]" name="testWithZeroPositiveAndNegitive" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithZeroPositiveAndNegitive -->
      </class> <!-- com.ip.qa.Comparator2Test -->
      <class name="com.ip.qa.StreamExample2Test">
        <test-method status="PASS" signature="multiple()[pri:0, instance:com.ip.qa.StreamExample2Test@34ce8af7]" name="multiple" duration-ms="2" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multiple -->
        <test-method status="PASS" signature="nmAnyMatch()[pri:0, instance:com.ip.qa.StreamExample2Test@34ce8af7]" name="nmAnyMatch" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nmAnyMatch -->
        <test-method status="PASS" signature="nmNotMatch()[pri:0, instance:com.ip.qa.StreamExample2Test@34ce8af7]" name="nmNotMatch" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nmNotMatch -->
        <test-method status="FAIL" signature="nmNull()[pri:0, instance:com.ip.qa.StreamExample2Test@34ce8af7]" name="nmNull" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at com.ip.qa.StreamExample2.addTest(StreamExample2.java:14)
at com.ip.qa.StreamExample2Test.nmNull(StreamExample2Test.java:29)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nmNull -->
      </class> <!-- com.ip.qa.StreamExample2Test -->
      <class name="com.ip.qa.StreamExample3Test">
        <test-method status="PASS" signature="testWithNotPrime()[pri:0, instance:com.ip.qa.StreamExample3Test@b684286]" name="testWithNotPrime" duration-ms="4" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithNotPrime -->
        <test-method status="PASS" signature="testWithPrime()[pri:0, instance:com.ip.qa.StreamExample3Test@b684286]" name="testWithPrime" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithPrime -->
        <test-method status="PASS" signature="testWithZero()[pri:0, instance:com.ip.qa.StreamExample3Test@b684286]" name="testWithZero" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithZero -->
      </class> <!-- com.ip.qa.StreamExample3Test -->
      <class name="com.ip.qa.StreamReduceTest">
        <test-method status="PASS" signature="testWithAllNegitiveNumbers()[pri:0, instance:com.ip.qa.StreamReduceTest@880ec60]" name="testWithAllNegitiveNumbers" duration-ms="2" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithAllNegitiveNumbers -->
        <test-method status="PASS" signature="testWithAllPositiveNumbers()[pri:0, instance:com.ip.qa.StreamReduceTest@880ec60]" name="testWithAllPositiveNumbers" duration-ms="1" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithAllPositiveNumbers -->
        <test-method status="PASS" signature="testWithEmptyString()[pri:0, instance:com.ip.qa.StreamReduceTest@880ec60]" name="testWithEmptyString" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithEmptyString -->
        <test-method status="PASS" signature="testWithPositiveAndNegitiveNumbers()[pri:0, instance:com.ip.qa.StreamReduceTest@880ec60]" name="testWithPositiveAndNegitiveNumbers" duration-ms="0" started-at="2020-04-27T22:10:32Z" finished-at="2020-04-27T22:10:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithPositiveAndNegitiveNumbers -->
      </class> <!-- com.ip.qa.StreamReduceTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
